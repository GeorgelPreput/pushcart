{
    "autoDocstring.docstringFormat": "numpy",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.organizeImports": "explicit"
    },
    "databricks.python.envFile": "${workspaceFolder}/.env",
    "jupyter.notebookFileRoot": "${workspaceFolder}",
    "jupyter.interactiveWindow.cellMarker.codeRegex": "^# COMMAND ----------|^# Databricks notebook source|^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",
    "jupyter.interactiveWindow.cellMarker.default": "# COMMAND ----------",
    "python.analysis.extraPaths": [
        "src"
    ],
    "python.analysis.stubPath": ".vscode",
    "python.analysis.exclude": [
        "**/.pyenv"
    ],
    "python.analysis.ignore": [
        "**/.pyenv"
    ],
    "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
    "python.terminal.activateEnvironment": true,
    "python.terminal.activateEnvInCurrentTerminal": true,
    "python.testing.pytestArgs": [
        "."
    ],
    "python.testing.unittestEnabled": false,
    "python.testing.pytestEnabled": true,
    "[python]": {
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.fixAll": "explicit"
        },
        "editor.defaultFormatter": "ms-python.black-formatter"
    },
    "files.exclude": {
        "**/*.egg-info": true,
        "**/__pycache__": true,
        ".pytest_cache": true
    },
    "terminal.integrated.tabStopWidth": 4,
    "files.associations": {
        "*.sql": "sql"
    },
    "[sql]": {
        "editor.formatOnSave": false
    },
    "[markdown]": {
        "editor.rulers": [
            88
        ]
    },
    "yaml.schemas": {
        "https://squidfunk.github.io/mkdocs-material/schema.json": "mkdocs.yml"
    },
    "yaml.customTags": [
        "!ENV scalar",
        "!ENV sequence",
        "!relative scalar",
        "tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg",
        "tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji",
        "tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format"
    ]
}
